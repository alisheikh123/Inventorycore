// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication4.Data;

namespace WebApplication4.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inventory_Management_Systems.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<string>("CustomerCode")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblAccount", b =>
                {
                    b.Property<int>("accountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("PhoneNo");

                    b.Property<int>("accountCode");

                    b.Property<int>("accountHeadId");

                    b.Property<string>("accountTitle")
                        .IsRequired();

                    b.HasKey("accountId");

                    b.HasIndex("accountHeadId");

                    b.ToTable("tblAccount");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblAccountHead", b =>
                {
                    b.Property<int>("accountHeadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("accountHeadName")
                        .IsRequired();

                    b.Property<string>("account_Head_Code")
                        .IsRequired();

                    b.HasKey("accountHeadId");

                    b.ToTable("tblAccountHead");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("CompanyrCode")
                        .IsRequired();

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CompanyId");

                    b.ToTable("tblCompany");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblInvoice", b =>
                {
                    b.Property<int>("invoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyName");

                    b.Property<DateTime>("Created_Date");

                    b.Property<DateTime>("Due_Date");

                    b.Property<int>("Invoice_type");

                    b.Property<int>("accountId");

                    b.Property<int>("customerName");

                    b.Property<string>("invoice_Code")
                        .IsRequired();

                    b.Property<DateTime>("invoice_Date");

                    b.Property<int>("payment_Mode");

                    b.HasKey("invoiceId");

                    b.HasIndex("CompanyName");

                    b.HasIndex("accountId");

                    b.HasIndex("customerName");

                    b.ToTable("tblInvoice");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblInvoiceDetail", b =>
                {
                    b.Property<int>("invoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity");

                    b.Property<decimal>("amount");

                    b.Property<int>("invoiceId");

                    b.Property<int>("itemId");

                    b.Property<decimal>("price");

                    b.HasKey("invoiceDetailId");

                    b.HasIndex("invoiceId");

                    b.HasIndex("itemId");

                    b.ToTable("tblInvoiceDetail");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblItem", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemCode")
                        .IsRequired();

                    b.Property<int>("UnitId");

                    b.Property<int>("catId");

                    b.Property<string>("itemName")
                        .IsRequired();

                    b.Property<decimal>("purchase_Price");

                    b.Property<decimal>("sale_Price");

                    b.HasKey("itemId");

                    b.HasIndex("UnitId");

                    b.HasIndex("catId");

                    b.ToTable("tblItem");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblItemcategory", b =>
                {
                    b.Property<int>("catId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("catDesc");

                    b.Property<string>("catName")
                        .IsRequired();

                    b.HasKey("catId");

                    b.ToTable("tblItemcategory");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblItemUnit", b =>
                {
                    b.Property<int>("unitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("unitName")
                        .IsRequired();

                    b.HasKey("unitId");

                    b.ToTable("tblItemUnit");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblVoucher", b =>
                {
                    b.Property<int>("voucherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("createdDate");

                    b.Property<int>("invoiceId");

                    b.Property<int>("userId");

                    b.Property<string>("voucherCode")
                        .IsRequired();

                    b.Property<DateTime>("voucherDate");

                    b.Property<string>("voucher_Type")
                        .IsRequired();

                    b.HasKey("voucherId");

                    b.HasIndex("invoiceId");

                    b.ToTable("tblVoucher");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblVoucherDetail", b =>
                {
                    b.Property<int>("voucherdetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Narration");

                    b.Property<decimal>("creditAmount");

                    b.Property<decimal>("debitAmount");

                    b.Property<int>("voucherId");

                    b.HasKey("voucherdetailId");

                    b.HasIndex("voucherId");

                    b.ToTable("tblVoucherDetail");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("password")
                        .IsRequired();

                    b.Property<string>("username")
                        .IsRequired();

                    b.HasKey("userId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblAccount", b =>
                {
                    b.HasOne("Inventory_Management_Systems.Models.tblAccountHead", "TblAccountHead")
                        .WithMany()
                        .HasForeignKey("accountHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblInvoice", b =>
                {
                    b.HasOne("Inventory_Management_Systems.Models.tblCompany", "tblCompany")
                        .WithMany()
                        .HasForeignKey("CompanyName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory_Management_Systems.Models.tblAccount", "TblAccount")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory_Management_Systems.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblInvoiceDetail", b =>
                {
                    b.HasOne("Inventory_Management_Systems.Models.tblInvoice", "TblInvoice")
                        .WithMany()
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory_Management_Systems.Models.tblItem", "TblItem")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblItem", b =>
                {
                    b.HasOne("Inventory_Management_Systems.Models.tblItemUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory_Management_Systems.Models.tblItemcategory", "category")
                        .WithMany()
                        .HasForeignKey("catId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblVoucher", b =>
                {
                    b.HasOne("Inventory_Management_Systems.Models.tblInvoice", "TblInvoice")
                        .WithMany()
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory_Management_Systems.Models.tblVoucherDetail", b =>
                {
                    b.HasOne("Inventory_Management_Systems.Models.tblVoucher", "TblVoucher")
                        .WithMany()
                        .HasForeignKey("voucherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
